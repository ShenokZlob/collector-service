// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"time"

	"github.com/ShenokZlob/collector-service/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthRepositorer creates a new instance of MockAuthRepositorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthRepositorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthRepositorer {
	mock := &MockAuthRepositorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthRepositorer is an autogenerated mock type for the AuthRepositorer type
type MockAuthRepositorer struct {
	mock.Mock
}

type MockAuthRepositorer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthRepositorer) EXPECT() *MockAuthRepositorer_Expecter {
	return &MockAuthRepositorer_Expecter{mock: &_m.Mock}
}

// AddToBlackList provides a mock function for the type MockAuthRepositorer
func (_mock *MockAuthRepositorer) AddToBlackList(jti string) *domain.ResponseErr {
	ret := _mock.Called(jti)

	if len(ret) == 0 {
		panic("no return value specified for AddToBlackList")
	}

	var r0 *domain.ResponseErr
	if returnFunc, ok := ret.Get(0).(func(string) *domain.ResponseErr); ok {
		r0 = returnFunc(jti)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ResponseErr)
		}
	}
	return r0
}

// MockAuthRepositorer_AddToBlackList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToBlackList'
type MockAuthRepositorer_AddToBlackList_Call struct {
	*mock.Call
}

// AddToBlackList is a helper method to define mock.On call
//   - jti
func (_e *MockAuthRepositorer_Expecter) AddToBlackList(jti interface{}) *MockAuthRepositorer_AddToBlackList_Call {
	return &MockAuthRepositorer_AddToBlackList_Call{Call: _e.mock.On("AddToBlackList", jti)}
}

func (_c *MockAuthRepositorer_AddToBlackList_Call) Run(run func(jti string)) *MockAuthRepositorer_AddToBlackList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthRepositorer_AddToBlackList_Call) Return(responseErr *domain.ResponseErr) *MockAuthRepositorer_AddToBlackList_Call {
	_c.Call.Return(responseErr)
	return _c
}

func (_c *MockAuthRepositorer_AddToBlackList_Call) RunAndReturn(run func(jti string) *domain.ResponseErr) *MockAuthRepositorer_AddToBlackList_Call {
	_c.Call.Return(run)
	return _c
}

// AddToken provides a mock function for the type MockAuthRepositorer
func (_mock *MockAuthRepositorer) AddToken(userID string, jti string, issued time.Time, expires time.Time) *domain.ResponseErr {
	ret := _mock.Called(userID, jti, issued, expires)

	if len(ret) == 0 {
		panic("no return value specified for AddToken")
	}

	var r0 *domain.ResponseErr
	if returnFunc, ok := ret.Get(0).(func(string, string, time.Time, time.Time) *domain.ResponseErr); ok {
		r0 = returnFunc(userID, jti, issued, expires)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ResponseErr)
		}
	}
	return r0
}

// MockAuthRepositorer_AddToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToken'
type MockAuthRepositorer_AddToken_Call struct {
	*mock.Call
}

// AddToken is a helper method to define mock.On call
//   - userID
//   - jti
//   - issued
//   - expires
func (_e *MockAuthRepositorer_Expecter) AddToken(userID interface{}, jti interface{}, issued interface{}, expires interface{}) *MockAuthRepositorer_AddToken_Call {
	return &MockAuthRepositorer_AddToken_Call{Call: _e.mock.On("AddToken", userID, jti, issued, expires)}
}

func (_c *MockAuthRepositorer_AddToken_Call) Run(run func(userID string, jti string, issued time.Time, expires time.Time)) *MockAuthRepositorer_AddToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(time.Time), args[3].(time.Time))
	})
	return _c
}

func (_c *MockAuthRepositorer_AddToken_Call) Return(responseErr *domain.ResponseErr) *MockAuthRepositorer_AddToken_Call {
	_c.Call.Return(responseErr)
	return _c
}

func (_c *MockAuthRepositorer_AddToken_Call) RunAndReturn(run func(userID string, jti string, issued time.Time, expires time.Time) *domain.ResponseErr) *MockAuthRepositorer_AddToken_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function for the type MockAuthRepositorer
func (_mock *MockAuthRepositorer) CreateUser(user *domain.User) (*domain.User, *domain.ResponseErr) {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *domain.User
	var r1 *domain.ResponseErr
	if returnFunc, ok := ret.Get(0).(func(*domain.User) (*domain.User, *domain.ResponseErr)); ok {
		return returnFunc(user)
	}
	if returnFunc, ok := ret.Get(0).(func(*domain.User) *domain.User); ok {
		r0 = returnFunc(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*domain.User) *domain.ResponseErr); ok {
		r1 = returnFunc(user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.ResponseErr)
		}
	}
	return r0, r1
}

// MockAuthRepositorer_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockAuthRepositorer_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - user
func (_e *MockAuthRepositorer_Expecter) CreateUser(user interface{}) *MockAuthRepositorer_CreateUser_Call {
	return &MockAuthRepositorer_CreateUser_Call{Call: _e.mock.On("CreateUser", user)}
}

func (_c *MockAuthRepositorer_CreateUser_Call) Run(run func(user *domain.User)) *MockAuthRepositorer_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.User))
	})
	return _c
}

func (_c *MockAuthRepositorer_CreateUser_Call) Return(user1 *domain.User, responseErr *domain.ResponseErr) *MockAuthRepositorer_CreateUser_Call {
	_c.Call.Return(user1, responseErr)
	return _c
}

func (_c *MockAuthRepositorer_CreateUser_Call) RunAndReturn(run func(user *domain.User) (*domain.User, *domain.ResponseErr)) *MockAuthRepositorer_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// FindByEmail provides a mock function for the type MockAuthRepositorer
func (_mock *MockAuthRepositorer) FindByEmail(email string) (*domain.User, *domain.ResponseErr) {
	ret := _mock.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 *domain.User
	var r1 *domain.ResponseErr
	if returnFunc, ok := ret.Get(0).(func(string) (*domain.User, *domain.ResponseErr)); ok {
		return returnFunc(email)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = returnFunc(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) *domain.ResponseErr); ok {
		r1 = returnFunc(email)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.ResponseErr)
		}
	}
	return r0, r1
}

// MockAuthRepositorer_FindByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByEmail'
type MockAuthRepositorer_FindByEmail_Call struct {
	*mock.Call
}

// FindByEmail is a helper method to define mock.On call
//   - email
func (_e *MockAuthRepositorer_Expecter) FindByEmail(email interface{}) *MockAuthRepositorer_FindByEmail_Call {
	return &MockAuthRepositorer_FindByEmail_Call{Call: _e.mock.On("FindByEmail", email)}
}

func (_c *MockAuthRepositorer_FindByEmail_Call) Run(run func(email string)) *MockAuthRepositorer_FindByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthRepositorer_FindByEmail_Call) Return(user *domain.User, responseErr *domain.ResponseErr) *MockAuthRepositorer_FindByEmail_Call {
	_c.Call.Return(user, responseErr)
	return _c
}

func (_c *MockAuthRepositorer_FindByEmail_Call) RunAndReturn(run func(email string) (*domain.User, *domain.ResponseErr)) *MockAuthRepositorer_FindByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserByTelegramID provides a mock function for the type MockAuthRepositorer
func (_mock *MockAuthRepositorer) FindUserByTelegramID(telegramId int64) (*domain.User, *domain.ResponseErr) {
	ret := _mock.Called(telegramId)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByTelegramID")
	}

	var r0 *domain.User
	var r1 *domain.ResponseErr
	if returnFunc, ok := ret.Get(0).(func(int64) (*domain.User, *domain.ResponseErr)); ok {
		return returnFunc(telegramId)
	}
	if returnFunc, ok := ret.Get(0).(func(int64) *domain.User); ok {
		r0 = returnFunc(telegramId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int64) *domain.ResponseErr); ok {
		r1 = returnFunc(telegramId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.ResponseErr)
		}
	}
	return r0, r1
}

// MockAuthRepositorer_FindUserByTelegramID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByTelegramID'
type MockAuthRepositorer_FindUserByTelegramID_Call struct {
	*mock.Call
}

// FindUserByTelegramID is a helper method to define mock.On call
//   - telegramId
func (_e *MockAuthRepositorer_Expecter) FindUserByTelegramID(telegramId interface{}) *MockAuthRepositorer_FindUserByTelegramID_Call {
	return &MockAuthRepositorer_FindUserByTelegramID_Call{Call: _e.mock.On("FindUserByTelegramID", telegramId)}
}

func (_c *MockAuthRepositorer_FindUserByTelegramID_Call) Run(run func(telegramId int64)) *MockAuthRepositorer_FindUserByTelegramID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockAuthRepositorer_FindUserByTelegramID_Call) Return(user *domain.User, responseErr *domain.ResponseErr) *MockAuthRepositorer_FindUserByTelegramID_Call {
	_c.Call.Return(user, responseErr)
	return _c
}

func (_c *MockAuthRepositorer_FindUserByTelegramID_Call) RunAndReturn(run func(telegramId int64) (*domain.User, *domain.ResponseErr)) *MockAuthRepositorer_FindUserByTelegramID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockAuthRepositorer
func (_mock *MockAuthRepositorer) GetUser(userID string) (*domain.User, *domain.ResponseErr) {
	ret := _mock.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *domain.User
	var r1 *domain.ResponseErr
	if returnFunc, ok := ret.Get(0).(func(string) (*domain.User, *domain.ResponseErr)); ok {
		return returnFunc(userID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = returnFunc(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) *domain.ResponseErr); ok {
		r1 = returnFunc(userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.ResponseErr)
		}
	}
	return r0, r1
}

// MockAuthRepositorer_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockAuthRepositorer_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - userID
func (_e *MockAuthRepositorer_Expecter) GetUser(userID interface{}) *MockAuthRepositorer_GetUser_Call {
	return &MockAuthRepositorer_GetUser_Call{Call: _e.mock.On("GetUser", userID)}
}

func (_c *MockAuthRepositorer_GetUser_Call) Run(run func(userID string)) *MockAuthRepositorer_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthRepositorer_GetUser_Call) Return(user *domain.User, responseErr *domain.ResponseErr) *MockAuthRepositorer_GetUser_Call {
	_c.Call.Return(user, responseErr)
	return _c
}

func (_c *MockAuthRepositorer_GetUser_Call) RunAndReturn(run func(userID string) (*domain.User, *domain.ResponseErr)) *MockAuthRepositorer_GetUser_Call {
	_c.Call.Return(run)
	return _c
}
