{
    "swagger": "2.0",
    "info": {
        "description": "Сервис сбора и анализа данных Collector Ouphe",
        "title": "Collector Ouphe API",
        "contact": {},
        "version": "1.0"
    },
    "paths": {
        "/collections": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Получить список коллекций текущего пользователя",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Collections"
                ],
                "summary": "Get user's collections",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.Collection"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Создать новую коллекцию с указанным именем",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Collections"
                ],
                "summary": "Create new collection",
                "parameters": [
                    {
                        "description": "Название новой коллекции",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateCollectionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.Collection"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/collections/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Получить коллекцию пользователя",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Collections"
                ],
                "summary": "Get one user's collection by ID",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Collection"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Удалить коллекцию по ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Collections"
                ],
                "summary": "Delete collection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Collection ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Переименовать коллекцию по ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Collections"
                ],
                "summary": "Rename collection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Collection ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Новое имя коллекции",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RenameCollectionRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/dto.Collection"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/collections/{id}/cards": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Получить список карт из коллекции юзера",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Get user's cards in collection",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.Card"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Добавить карту в коллекцию юзера",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Add a card to user's collection",
                "responses": {
                    "201": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/collections/{id}/cards/{card_id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Удалить карту из коллекции юзера",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Delete the card from user's collection",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Установить количество карт в коллекции юзера",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Set card count in user's collection",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Вход пользователя по email и паролю",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login user by email",
                "parameters": [
                    {
                        "description": "Данные для входа",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/domain.ResponseErr"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/domain.ResponseErr"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "description": "Выход пользователя и инвалидация refresh токена",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Logout user",
                "parameters": [
                    {
                        "description": "Refresh token для выхода",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LogoutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.LogoutResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/domain.ResponseErr"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/domain.ResponseErr"
                        }
                    }
                }
            }
        },
        "/refresh": {
            "post": {
                "description": "Обновление access и refresh токенов",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh JWT tokens",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.RefreshTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/domain.ResponseErr"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/domain.ResponseErr"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Регистрация пользователя через Telegram бота",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register telegram user",
                "parameters": [
                    {
                        "description": "Данные для регистрации",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/domain.ResponseErr"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.ResponseErr": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "dto.Card": {
            "description": "Модель карты с Scryfall ID, именем, URL изображения и количеством",
            "type": "object",
            "properties": {
                "card_url": {
                    "type": "string",
                    "example": "https://example.com/black-lotus.jpg"
                },
                "count": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Black Lotus"
                },
                "scryfall_id": {
                    "type": "string",
                    "example": "12345678-1234-1234-1234-123456789012"
                }
            }
        },
        "dto.Collection": {
            "description": "Модель коллекции с ID и именем",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "64a9b66b2db8b91234a6e8e3"
                },
                "name": {
                    "type": "string",
                    "example": "My cool collection"
                }
            }
        },
        "dto.CreateCollectionRequest": {
            "description": "Запрос для создания коллекции с указанным именем",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "My cool collection"
                }
            }
        },
        "dto.ErrorResponse": {
            "description": "Структура ответа при ошибке",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "unauthorized"
                },
                "status": {
                    "description": "Optional, can be used to indicate HTTP status code",
                    "type": "integer"
                }
            }
        },
        "dto.LoginRequest": {
            "description": "Вход пользователя по email и паролю",
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "strongpassword"
                }
            }
        },
        "dto.LoginResponse": {
            "description": "Ответ с JWT-токенами (access и refresh) после логина",
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "expires_at": {
                    "type": "integer",
                    "example": 900
                }
            }
        },
        "dto.LogoutRequest": {
            "description": "Выход пользователя: инвалидация предоставленного refresh-токена",
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string",
                    "example": "dGhpc19pc19hX3JlZnJlc2hfdG9rZW4="
                }
            }
        },
        "dto.LogoutResponse": {
            "description": "Подтверждение успешного logout",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Logout successful"
                }
            }
        },
        "dto.RefreshTokenRequest": {
            "description": "Обновление access-токена по refresh-токену",
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string",
                    "example": "dGhpc19pc19hX3JlZnJlc2hfdG9rZW4="
                }
            }
        },
        "dto.RefreshTokenResponse": {
            "description": "Новый access- и refresh-токены после успешного refresh",
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "expires_at": {
                    "type": "integer",
                    "example": 900
                }
            }
        },
        "dto.RegisterRequest": {
            "description": "Регистрация пользователя по email и паролю",
            "type": "object",
            "required": [
                "email",
                "first_name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "first_name": {
                    "type": "string",
                    "example": "Ivan"
                },
                "last_name": {
                    "type": "string",
                    "example": "Ivanov"
                },
                "password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "strongpassword"
                }
            }
        },
        "dto.RegisterResponse": {
            "description": "Ответ с JWT-токенами (access и refresh)",
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "expires_at": {
                    "type": "integer",
                    "example": 900
                }
            }
        },
        "dto.RenameCollectionRequest": {
            "description": "Запрос для изменения названия коллекции",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Renamed collection"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}